// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  active    Boolean  @default(true)
  token     String?
  avatar    String?

  // Relations     
  sentMessages     Message[]     @relation("SentMessages")
  receivedMessages Message[]     @relation("ReceivedMessages")
  contacts         Contact[]     @relation("User")
  contact          Contact?
  group            Group[]
  groupMember      GroupMember[]
}

model Message {
  id          Int       @id @default(autoincrement())
  senderId    Int
  recipientId Int
  text        String
  sentAt      DateTime  @default(now())
  readAt      DateTime?

  // Relations
  sender    User @relation(name: "SentMessages", fields: [senderId], references: [id])
  recipient User @relation(name: "ReceivedMessages", fields: [recipientId], references: [id])
}

model Contact {
  id        Int    @id @default(autoincrement())
  userId    Int
  contactId Int    @unique

  // Relations
  user    User @relation("User", fields: [userId], references: [id])
  contact User @relation(fields: [contactId], references: [id])

  // Index to enforce unique contact names within a user's contacts
  @@unique([userId, contactId], name: "unique_user_contact_pair")
}

model Group {
  id        Int      @id @default(autoincrement())
  createdBy Int
  createdAt DateTime @default(now())

  // Relations
  creator User          @relation(fields: [createdBy], references: [id])
  members GroupMember[]
}

model GroupMember {
  userId  Int
  groupId Int

  // Relations
  user  User  @relation(fields: [userId], references: [id])
  group Group @relation(fields: [groupId], references: [id])

  @@unique([userId, groupId])
}
